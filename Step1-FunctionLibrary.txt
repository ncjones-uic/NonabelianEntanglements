/* STEP 1:  COPY PASTE THIS ENTIRE FILE INTO A RUNNING MAGMA PROMPT */

/* BEGIN LIBRARY OF FUNCTIONS */

RTI:= function(x)
	for a in [0..1000] do
		if a eq x then
			return a;
			break a;
		end if;
	end for;
end function;

KernelCrossKernel := function(G,m1,m2)
	m := m1*m2;
	Gens1 := {};
	for X1 in Generators(GL(2,Integers(m2))) do
		a11 := CRT([RTI(X1[1,1]),1],[m2,m1]);
		a12 := CRT([RTI(X1[1,2]),0],[m2,m1]);
		a21 := CRT([RTI(X1[2,1]),0],[m2,m1]);
		a22 := CRT([RTI(X1[2,2]),1],[m2,m1]);
		A := Matrix(IntegerRing(m),2,2,[a11,a12,a21,a22]);
		Gens1 := Gens1 join { A };
	end for;
	Ker1 := MatrixGroup<2, Integers(m) | Gens1 >;
	Gens2 := {};
	for X1 in Generators(GL(2,Integers(m1))) do
		a11 := CRT([RTI(X1[1,1]),1],[m1,m2]);
		a12 := CRT([RTI(X1[1,2]),0],[m1,m2]);
		a21 := CRT([RTI(X1[2,1]),0],[m1,m2]);
		a22 := CRT([RTI(X1[2,2]),1],[m1,m2]);
		A := Matrix(IntegerRing(m),2,2,[a11,a12,a21,a22]);
		Gens2 := Gens2 join { A };
	end for;
	Ker2 := MatrixGroup<2, Integers(m) | Gens2 >;
	GKer1 := MatrixGroup<2, Integers(m1) | Generators(G meet Ker2) >;
	GKer2 := MatrixGroup<2, Integers(m2) | Generators(G meet Ker1) >;
	GKer := MatrixGroup<2, Integers(m) | Generators(G meet Ker2), Generators(G meet Ker1) >;
	return <GKer1,GKer2,GKer>;
end function;


SizeOfGL2Kernel := function(d,m)
	answer := 1;
	q := Floor(d/m);	
	for n := 1 to #Factorization(q) do
		p := Factorization(q)[n,1];
		e := Factorization(q)[n,2];
		if IsDivisibleBy(m,p) then
			pfactor := p^(4*e);
		end if;
		if not IsDivisibleBy(m,p) then
			pfactor := p^(4*(e-1))*p*(p-1)^2*(p+1);
		end if;
		answer := answer*pfactor;
	end for;
	return answer;
end function;

GL2Level := function(G,m)
	setoflevels := {};
	if #G eq #GL(2,Integers(m)) then 
		setoflevels := { 1 };
	end if;
	for d in Divisors(m) do
		if d gt 1 then
			Gmodd := MatrixGroup<2, Integers(d) | Generators(G) >;
			if Floor(#G/#Gmodd) eq SizeOfGL2Kernel(m,d) then
				setoflevels := setoflevels join { d };
			end if;
		end if;
	end for;
	return Min(setoflevels);
end function;

DetOfGroup := function(G,m)
	D := MatrixGroup<1, IntegerRing(m) | [1] >;
	for X in Generators(G) do
		D := MatrixGroup<1, IntegerRing(m) | Generators(D), [Determinant(X)] >;
	end for;
	return D;
end function;

Genus := function(H,m)
	G := GL(2,IntegerRing(m));
	S := SL(2,IntegerRing(m));
	f, GPerm := PermutationRepresentation(G);
	gi := f([0,-1,1,0]);
	gp := f([1,1,-1,0]);
	Si := Set(Class(f(S),gi));Â 
	Sp := Set(Class(f(S),gp));
	Gamma := MatrixGroup<2, IntegerRing(m) | [1,1,0,1] >;
	negI := Matrix(IntegerRing(m),2,2,[-1,0,0,-1]);
	Xenl := MatrixGroup<2, IntegerRing(m) | H, [-1,0,0,-1] >;
	XS := Xenl meet S;
	Ni := Si meet Set(f(XS));
	Np := Sp meet Set(f(XS));
	ri := #Ni / #Si;
	rp := #Np / #Sp;
	rinf := #DoubleCosetRepresentatives(f(S),f(Gamma),f(XS))*#XS/#S;
	genus := 1 + #S/12/#XS*(1 - 3*ri - 4*rp - 6*rinf);
	return <ri, rp, rinf, genus>;
end function;

OuterAutomorphismRepresentatives := function(A)
	List := [];
	f,G := PermutationRepresentation(A);
	for N in Reverse(NormalSubgroups(G)) do
		if #N`subgroup eq #A/OuterOrder(A) then
			dummy := true;
			for x in SetToSequence(Set(N`subgroup)) do
				if IsInnerAutomorphism(x@@f) eq false then
					dummy := false;
				end if;
			end for;
			if dummy eq true then
				Ans := N`subgroup;
			break N;
			end if;
		end if;
	end for;
	Triv := NormalSubgroups(G)[1]`subgroup;
	L := DoubleCosetRepresentatives(G,Ans,Triv);
	for x in L do
		Append(~List,x@@f);
	end for;
	return List;
end function;

FiberedProductWithTwisting := function(ZLP1,l1,ZLP2,l2,N1,phi1,phi2,ff,ga)
	G := MatrixGroup<2,IntegerRing(l1*l2) | [1,0,0,1] >;
	for X2 in Generators(ZLP2) do
		X1pre := ga(phi2(X2))@@ff;
		X1 := X1pre@@phi1;
		a11 := CRT([RTI(X1[1,1]),RTI(X2[1,1])],[l1,l2]);
		a12 := CRT([RTI(X1[1,2]),RTI(X2[1,2])],[l1,l2]);
		a21 := CRT([RTI(X1[2,1]),RTI(X2[2,1])],[l1,l2]);
		a22 := CRT([RTI(X1[2,2]),RTI(X2[2,2])],[l1,l2]);
		A := Matrix(IntegerRing(l1*l2),2,2,[a11,a12,a21,a22]);
		G := MatrixGroup<2, IntegerRing(l1*l2) | G, A>;
	end for;
	for X1 in Generators(ZLP1) do
		X2pre := ff(phi1(X1))@@ga;
	       X2 := X2pre@@phi2;
		a11 := CRT([RTI(X1[1,1]),RTI(X2[1,1])],[l1,l2]);
		a12 := CRT([RTI(X1[1,2]),RTI(X2[1,2])],[l1,l2]);
		a21 := CRT([RTI(X1[2,1]),RTI(X2[2,1])],[l1,l2]);
		a22 := CRT([RTI(X1[2,2]),RTI(X2[2,2])],[l1,l2]);
		A := Matrix(IntegerRing(l1*l2),2,2,[a11,a12,a21,a22]);
		G := MatrixGroup<2, IntegerRing(l1*l2) | G, A>;
	end for;
	for n1 in Generators(N1) do
		a11 := CRT([RTI(n1[1,1]),1],[l1,l2]);
		a12 := CRT([RTI(n1[1,2]),0],[l1,l2]);
		a21 := CRT([RTI(n1[2,1]),0],[l1,l2]);
		a22 := CRT([RTI(n1[2,2]),1],[l1,l2]);
		A := Matrix(IntegerRing(l1*l2),2,2,[a11,a12,a21,a22]);
		G := MatrixGroup<2, IntegerRing(l1*l2) | G, A>;
	end for;
	return G;
end function;

CumminsPauliGL2Groups := function(m,g)
	List := [];
	for d in Divisors(#GL(2,IntegerRing(m))) do
		print <d,#GL(2,IntegerRing(m))/d>;
		for H in Subgroups(GL(2,IntegerRing(m)):IndexEqual := d) do
			if Genus(H`subgroup,m)[4] eq g then
				Append(~List,<H`subgroup,H`subgroup meet SL(2,Integers(m)),Genus(H`subgroup,m),m>);
			end if;
		end for;
	end for;
	return List;
end function;

ThinDownToNonAbelianEntanglements := function(L,m1,m2)
	Kernel1Generators := [];
	for X in Generators(GL(2,IntegerRing(m2))) do
		XK1 := Matrix(IntegerRing(m1*m2),2,2,[CRT([1,RTI(X[1,1])],[m1,m2]),CRT([0,RTI(X[1,2])],[m1,m2]),CRT([0,RTI(X[2,1])],[m1,m2]),CRT([1,RTI(X[2,2])],[m1,m2])]);
		Append(~Kernel1Generators,XK1);
	end for;
	Ker1 := MatrixGroup<2, IntegerRing(m1*m2) | SequenceToSet(Kernel1Generators) >;
	Kernel2Generators := [];
	for X in Generators(GL(2,IntegerRing(m1))) do
		XK2 := Matrix(IntegerRing(m1*m2),2,2,[CRT([1,RTI(X[1,1])],[m2,m1]),CRT([0,RTI(X[1,2])],[m2,m1]),CRT([0,RTI(X[2,1])],[m2,m1]),CRT([1,RTI(X[2,2])],[m2,m1])]);
		Append(~Kernel2Generators,XK2);
	end for;
	Ker2 := MatrixGroup<2, IntegerRing(m1*m2) | SequenceToSet(Kernel2Generators) >;
	List := [];
	for x := 1 to #L do
		Gm1 := MatrixGroup<2, IntegerRing(m1) | Generators(L[x,1]) >;
		N1 := MatrixGroup<2, IntegerRing(m1) | Generators(L[x,1] meet Ker2) >;
		Gm2 := MatrixGroup<2, IntegerRing(m2) | Generators(L[x,1]) >;
		N2 := MatrixGroup<2, IntegerRing(m2) | Generators(L[x,1] meet Ker1) >;
		if #Gm2 gt #N2 and not IsAbelian(Gm2/N2) then
			Append(~List,<L[x,1],L[x,2],L[x,3],L[x,4],Gm1,N1,m1,Gm2,N2,m2,Gm2/N2>);
		end if;
	end for;
	return List;
end function;

NoConjugates := function(L,m)
	List := [];
	for x := 1 to #L do
		sinew := true;
		for y := 1 to #List do
			if #L[x,1] eq #List[y,1] then
				if IsConjugate(GL(2,Integers(m)),L[x,1],List[y,1]) then
					sinew := false;
					break y;
				end if;
			end if;
		end for;
		if sinew eq true then
			Append(~List,L[x]);
		end if;
	end for;
	return List;
end function;

IsConjugateToSubgroup := function(G1,G2,m)
	answer := false;
	for H2 in Subgroups(G2 : OrderEqual := #G1) do
		if IsConjugate(GL(2,Integers(m)),G1,H2`subgroup) then
			answer := true;
			break H2;
		end if;
	end for;
	return answer;
end function;

ThinDownByMaximality := function(L,m);
	List := [];
	for x := 1 to #L do
		ismaximal := true;
		for y := 1 to #L do
			if y ne x then
				if IsConjugateToSubgroup(L[x,1],L[y,1],m) then
					ismaximal := false;
					break y;
				end if;
			end if;
		end for;
		if ismaximal eq true then
			Append(~List,L[x]);
		end if;
	end for;
	return List;
end function;

FigureOutTheGroups := function(L,m1,m2);
	List := [];
	for x := 1 to #L do
		G1 := MatrixGroup<2, Integers(m1) | Generators(L[x,1]) >;
		G2 := MatrixGroup<2, Integers(m2) | Generators(L[x,1]) >;
		S1 := MatrixGroup<2, Integers(m1) | Generators(L[x,2]) >;
		S2 := MatrixGroup<2, Integers(m2) | Generators(L[x,2]) >;
		Gens1 := {};
		for X in Generators(G2) do
			a11 := CRT([1,RTI(X[1,1])],[m1,m2]);
			a12 := CRT([0,RTI(X[1,2])],[m1,m2]);
			a21 := CRT([0,RTI(X[2,1])],[m1,m2]);
			a22 := CRT([1,RTI(X[2,2])],[m1,m2]);
			A := Matrix(Integers(m1*m2),2,2,[a11,a12,a21,a22]);
			Gens1 := Gens1 join {A};
		end for;
		KerPi1 := MatrixGroup<2, Integers(m1*m2) | Gens1 >;
		Gens2 := {};
		for X in Generators(G1) do
			a11 := CRT([1,RTI(X[1,1])],[m2,m1]);
			a12 := CRT([0,RTI(X[1,2])],[m2,m1]);
			a21 := CRT([0,RTI(X[2,1])],[m2,m1]);
			a22 := CRT([1,RTI(X[2,2])],[m2,m1]);
			A := Matrix(Integers(m1*m2),2,2,[a11,a12,a21,a22]);
			Gens2 := Gens2 join {A};
		end for;
		KerPi2 := MatrixGroup<2, Integers(m1*m2) | Gens2 >;
		N1p := L[x,1] meet KerPi2;
		N1 := MatrixGroup<2, Integers(m1) | Generators(N1p) >;
		N2p := L[x,1] meet KerPi1;
		N2 := MatrixGroup<2, Integers(m2) | Generators(N2p) >;
		Append(~List,<L[x,1],G1,N1,G1/N1,Factorization(#G1),Genus(G1,m1),G2,N2,G2/N2,Factorization(#G2),Genus(G2,m2),L[x,2],S1,Factorization(#S1),S2,Factorization(#S2),L[x,3],L[x,4]>);
	end for;
	return List;
end function;

LHAdmissible := function(G,N,S)
	dummy := false;
	for Nt in NormalSubgroups(N meet S) do
		if IsNormal(G,Nt`subgroup) and not IsAbelian(G/Nt`subgroup) then
			Q, f := quo< G | Nt`subgroup >;
			Z := Center(Q);
			if f(N) subset Z then 
				dummy := true;
				break Nt;
			end if;
		end if;
	end for;
	return dummy;
end function;

LHAdmissiblelist := function(G,N,S)
	List := [];
	for Nt in NormalSubgroups(N meet S) do
		if IsNormal(G,Nt`subgroup) and not IsAbelian(G/Nt`subgroup) then
			Q, f := quo< G | Nt`subgroup >;
			Z := Center(Q);
			if f(N) subset Z then 
				Append(~List,<Nt`subgroup,G/Nt`subgroup,(G meet S)/(Nt`subgroup meet S)>);
			end if;
		end if;
	end for;
	return List;
end function;

IdentifyAbelianGL2Quotients := function(L,m1,m2)
	Kernel1Generators := [];
	for X in Generators(GL(2,IntegerRing(m2))) do
		XK1 := Matrix(IntegerRing(m1*m2),2,2,[CRT([1,RTI(X[1,1])],[m1,m2]),CRT([0,RTI(X[1,2])],[m1,m2]),CRT([0,RTI(X[2,1])],[m1,m2]),CRT([1,RTI(X[2,2])],[m1,m2])]);
		Append(~Kernel1Generators,XK1);
	end for;
	Ker1 := MatrixGroup<2, IntegerRing(m1*m2) | SequenceToSet(Kernel1Generators) >;
	Kernel2Generators := [];
	for X in Generators(GL(2,IntegerRing(m1))) do
		XK2 := Matrix(IntegerRing(m1*m2),2,2,[CRT([1,RTI(X[1,1])],[m2,m1]),CRT([0,RTI(X[1,2])],[m2,m1]),CRT([0,RTI(X[2,1])],[m2,m1]),CRT([1,RTI(X[2,2])],[m2,m1])]);
		Append(~Kernel2Generators,XK2);
	end for;
	Ker2 := MatrixGroup<2, IntegerRing(m1*m2) | SequenceToSet(Kernel2Generators) >;
	List := [];
	for x := 1 to #L do
		Gm1 := MatrixGroup<2, IntegerRing(m1) | Generators(L[x,1]) >;
		N1 := MatrixGroup<2, IntegerRing(m1) | Generators(L[x,1] meet Ker2) >;
		Gm2 := MatrixGroup<2, IntegerRing(m2) | Generators(L[x,1]) >;
		N2 := MatrixGroup<2, IntegerRing(m2) | Generators(L[x,1] meet Ker1) >;
		GSm1 := MatrixGroup<2, IntegerRing(m1) | Generators(L[x,2]) >;
		NS1 := MatrixGroup<2, IntegerRing(m1) | Generators(L[x,2] meet Ker2) >;
		GSm2 := MatrixGroup<2, IntegerRing(m2) | Generators(L[x,2]) >;
		NS2 := MatrixGroup<2, IntegerRing(m2) | Generators(L[x,2] meet Ker1) >;
		if #Gm2 gt #N2 and IsAbelian(Gm2/N2) and LHAdmissible(Gm1,N1,SL(2,Integers(m1))) and LHAdmissible(Gm2,N2,SL(2,Integers(m2))) then
			Append(~List,<L[x,1],L[x,2],L[x,3],L[x,4],Gm1,N1,LHAdmissiblelist(Gm1,N1,SL(2,Integers(m1))),Gm2,N2,Gm2/N2,LHAdmissiblelist(Gm2,N2,SL(2,Integers(m2))),GSm1,NS1,GSm2,NS2>);
		end if;
	end for;
	return List;
end function;

InverseImage := function(n,B,Ker,f)
	G := MatrixGroup<2, IntegerRing(n) | Ker >;
	for b in Generators(B) do
		A := b@@f;
		G := MatrixGroup<2, IntegerRing(n) | G, A >;
	end for;
	return G;
end function;

ConsistencyCheck := function(G,w1,w2,f)
	answer := true;
	for g in G do
		if w1(g) ne w2(f(g)) then
			answer := false;
			break g;
		end if;
	end for;
	return answer;
end function;

FormTheGlueings := function(L,m1,m2,genus)
	List := [];
	counter := 1;
	for x := 1 to #L do
		Gm1 := L[x,5];
		N1 := L[x,6];
		Gm2 := L[x,8];
		N2 := L[x,9];
		GSm1 := L[x,12];
		NS1 := L[x,13];
		GSm2 := L[x,14];
		NS2 := L[x,15];
		for As1 in L[x,7] do
			dummys1, pis1 := quo< GSm1 | As1[1] >;
			dummys1bar, varpi1 := quo< dummys1 | pis1(N1 meet SL(2,Integers(m1))) >;
			for As2 in L[x,11] do
				dummys2, pis2 := quo< GSm2 | As2[1] >;
				dummys2bar, varpi2 := quo< dummys2 | pis2(N2 meet SL(2,Integers(m2))) >;
				for H1 in Subgroups(pis1(GSm1)) do
					for H2 in Subgroups(pis2(GSm2)) do
						dummy12, ff := IsIsomorphic(H1`subgroup,H2`subgroup);
						if dummy12 eq true then
							Hm1 := InverseImage(m1,H1`subgroup,As1[1],pis1);
							Hm2 := InverseImage(m2,H2`subgroup,As2[1],pis2);
							for ga in OuterAutomorphismRepresentatives(AutomorphismGroup(H2`subgroup)) do
								if ConsistencyCheck(H1`subgroup,varpi1,varpi2,ff*ga) then
									Fib12 := FiberedProductWithTwisting(Hm1,m1,Hm2,m2,As1[1],pis1,pis2,ff,ga);
									if Genus(Fib12,m1*m2)[4] eq genus and IsConjugateToSubgroup(Fib12,L[x,1],m1*m2) then
										Append(~List,<L[x,1],Gm1,As1[1],Gm1/As1[1],Hm1,H1`subgroup,Gm2,As2[1],Hm2,Gm2/As2[1],H2`subgroup,Gm1/N1,IsIsomorphic(Gm1/As1[1],Gm2/As2[1]),N1,N2,Fib12,L[x,2],L[x,3],L[x,4],m1,m2,counter>);
										counter := counter + 1;
									end if;
								end if;								
							end for;
						end if;
					end for;
				end for;
			end for;
		end for;
	end for;
	return List;
end function;

ThinDownToContainsMinusIdentity := function(L,m)
	List := [];
	negI := Matrix(Integers(m),2,2,[-1,0,0,-1]);
	for x := 1 to #L do
		if negI in L[x,1] then
			Append(~List,L[x]);
		end if;
	end for;
	return List;
end function;

FullPreImagepk := function(G,m,p,k)
	if IsDivisibleBy(m,p) then
		PreG := G;
		level := m;
		for j := 1 to k do
			PreG := MatrixGroup<2, IntegerRing(level*p) | Generators(PreG), [1+level,0,0,1], [1,level,0,1], [1,0,level,1], [1,0,0,1+level] >;
			level := p*level;
		end for;
	end if;
	if not IsDivisibleBy(m,p) then
		Gen := {};
		for X1 in Generators(G) do
			a11 := CRT([RTI(X1[1,1]),1],[m,p]);
			a12 := CRT([RTI(X1[1,2]),0],[m,p]);
			a21 := CRT([RTI(X1[2,1]),0],[m,p]);
			a22 := CRT([RTI(X1[2,2]),1],[m,p]);
			A := Matrix(IntegerRing(m*p),2,2,[a11,a12,a21,a22]);
			Gen := Gen join { A };
		end for;
		for X2 in Generators(GL(2,Integers(p))) do
			a11 := CRT([RTI(X2[1,1]),1],[p,m]);
			a12 := CRT([RTI(X2[1,2]),0],[p,m]);
			a21 := CRT([RTI(X2[2,1]),0],[p,m]);
			a22 := CRT([RTI(X2[2,2]),1],[p,m]);
			A := Matrix(IntegerRing(m*p),2,2,[a11,a12,a21,a22]);
			Gen := Gen join { A };
		end for;
		PreG := MatrixGroup<2, IntegerRing(m*p) | Gen >;
		level := m*p;
		for j := 1 to k-1 do
			PreG := MatrixGroup<2, IntegerRing(level*p) | Generators(PreG), [1+level,0,0,1], [1,level,0,1], [1,0,level,1], [1,0,0,1+level] >;
			level := p*level;
		end for;
	end if;
	return PreG;
end function;

FullPreImage := function(G,m,d)
	PreG := G;
	level := m;
	w := #Factorization(d);
	for x := 1 to w do
		p := Factorization(d)[x,1];
		k := Factorization(d)[x,2];
		PreG := FullPreImagepk(PreG,level,p,k);
		level := level*p^k;
	end for;
	return PreG;
end function;

TwoTimesMComputation := function(L,m)
	List := [];
	negI := Matrix(Integers(2*m),2,2,[-1,0,0,-1]);
	for x := 1 to #L do
		FPreG := FullPreImagepk(L[x,1],m,2,1);
		for H in Subgroups(FPreG : IndexEqual := 2) do
			if not negI in H`subgroup then
				Hmodm := MatrixGroup<2, Integers(m) | Generators(H`subgroup) >;
				if #Hmodm eq #L[x,1] then
					Append(~List,<H`subgroup,H`subgroup meet SL(2,Integers(2*m)),L[x,3],2*m>);
				end if;
			end if;
		end for;
	end for;
	return List;
end function;

IsCommutatorMaximalinG := function(H,G)
	answer := true;
	if H subset G and CommutatorSubgroup(H,H) ne CommutatorSubgroup(G,G) then
		answer := false;
	end if;
	return answer;
end function;

LiftsOfG := function(G,m,d)
	List := [];
	PG := FullPreImage(G,m,d);
	for k in Divisors(d^4) do
		print <k,d^4/k>;
		for H in Subgroups(PG : IndexEqual := k) do
			Hmodm := MatrixGroup<2, Integers(m) | Generators(H`subgroup) >;
			if Hmodm eq G and #DetOfGroup(H`subgroup,m*d) eq EulerPhi(m*d) then
				Append(~List,<H`subgroup, H`subgroup meet SL(2,Integers(m*d)), Genus(H`subgroup,m*d),m*d>);
			end if;
		end for;
	end for;
	return List;
end function;

IsZSAdmissible := function(G,m)
	M1 := Matrix(Integers(m),2,2,[1,0,0,-1]);
	M2 := Matrix(Integers(m),2,2,[1,1,0,-1]);
	answer := false;
	for g in G do
		if Trace(g) eq 0 then
			for h in GL(2,Integers(m)) do
				if g*h eq h*M1 then
					answer := true;
					break h;
					break g;
				end if;
				if g*h eq h*M2 then
					answer := true;
					break h;
					break g;
				end if;
			end for;
		end if;
	end for;
	return answer;
end function;

ProperAdmissibleSubgroups := function(G1,m)
	List := [];
	for k in Divisors(#G1) do
		print <k,#G1/k>;
		for H in Subgroups(G1: IndexEqual := k) do
			X := H`subgroup;
			if #X ne #G1 and #DetOfGroup(X,m) eq EulerPhi(m) then
				if IsZSAdmissible(X,m) then
					Append(~List,<X, X meet SL(2,Integers(m)), Genus(X,m),m>);
				end if;
			end if;
		end for;
	end for;
	return List;
end function;

ThinDownToNotCommutatorMaximalinG := function(L,G,m,d)
	List := [];
	PG := FullPreImage(G,m,d);
	for x :=  1 to #L do
		if not IsCommutatorMaximalinG(L[x,1],PG) then
			Append(~List,L[x]);
		end if;
	end for;
	return List;
end function;

ThinDownToCommutatorMaximalinG := function(L,G,m,d)
	List := [];
	PG := FullPreImage(G,m,d);
	for x :=  1 to #L do
		if IsCommutatorMaximalinG(L[x,1],PG) then
			Append(~List,L[x]);
		end if;
	end for;
	return List;
end function;

CheckNextPrime := function(G6,p,genus)
	List := [];
	for H in Subgroups(GL(2,Integers(p))) do
		if #H`subgroup ne #GL(2,Integers(p)) and #DetOfGroup(H`subgroup,p) eq EulerPhi(p) then
			dummy1, phi1 := G6/G6;
			dummy2, phi2 := H`subgroup/H`subgroup;
			dummy12, ff := IsIsomorphic(dummy1,dummy2);
			ga := Random(OuterAutomorphismRepresentatives(AutomorphismGroup(dummy2)));
			FullCross := FiberedProductWithTwisting(G6,6,H`subgroup,p,G6,phi1,phi2,ff,ga);
			if Genus(FullCross,6*p)[4] eq genus then
				Append(~List,<H`subgroup,FullCross,p>);
			end if;
		end if;
	end for;
	return List;
end function;

CheckingPage31Conditions := function(G)
	List := [];
	for H in Subgroups(G) do
		Hmod3 := MatrixGroup<2, Integers(3) | Generators(H`subgroup) >;
		Hmod2 := MatrixGroup<2, Integers(2) | Generators(H`subgroup) >;
		if #H`subgroup eq #Hmod3 and #Hmod3 eq #Hmod2*2 then
			Append(~List,<H`subgroup,6>);
		end if;
	end for;
	return List;
end function;

FactorizationsOfM := function(m)
	List := [];
	for d in Divisors(m) do
		if d le Sqrt(m) and d gt 1 and GCD(d,Floor(m/d)) eq 1 then
			Append(~List,<d,Floor(m/d)>);
		end if;
	end for;
	return List;
end function;

/* END LIBRARY OF FUNCTIONS */
